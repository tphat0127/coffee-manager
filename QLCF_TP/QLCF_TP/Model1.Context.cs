//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QLCF_TP
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class QLCF_NTPEntities : DbContext
    {
        public QLCF_NTPEntities()
            : base("name=QLCF_NTPEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Bill> Bills { get; set; }
        public virtual DbSet<BillInfo> BillInfoes { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<Table> Tables { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int USP_SwitchTabble(Nullable<int> idTable1, Nullable<int> idTable2)
        {
            var idTable1Parameter = idTable1.HasValue ?
                new ObjectParameter("idTable1", idTable1) :
                new ObjectParameter("idTable1", typeof(int));
    
            var idTable2Parameter = idTable2.HasValue ?
                new ObjectParameter("idTable2", idTable2) :
                new ObjectParameter("idTable2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_SwitchTabble", idTable1Parameter, idTable2Parameter);
        }
    
        public virtual ObjectResult<USP_GetTableInfo_Result> USP_GetTableInfo(Nullable<int> idTable)
        {
            var idTableParameter = idTable.HasValue ?
                new ObjectParameter("idTable", idTable) :
                new ObjectParameter("idTable", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetTableInfo_Result>("USP_GetTableInfo", idTableParameter);
        }
    
        public virtual int USP_GroupTable(Nullable<int> idTable1, Nullable<int> idTable2)
        {
            var idTable1Parameter = idTable1.HasValue ?
                new ObjectParameter("idTable1", idTable1) :
                new ObjectParameter("idTable1", typeof(int));
    
            var idTable2Parameter = idTable2.HasValue ?
                new ObjectParameter("idTable2", idTable2) :
                new ObjectParameter("idTable2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GroupTable", idTable1Parameter, idTable2Parameter);
        }
    
        [DbFunction("QLCF_NTPEntities", "FN_ViewDoanThu")]
        public virtual IQueryable<FN_ViewDoanThu_Result> FN_ViewDoanThu(Nullable<System.DateTime> dateCheckIn, Nullable<System.DateTime> dateCheckOut)
        {
            var dateCheckInParameter = dateCheckIn.HasValue ?
                new ObjectParameter("DateCheckIn", dateCheckIn) :
                new ObjectParameter("DateCheckIn", typeof(System.DateTime));
    
            var dateCheckOutParameter = dateCheckOut.HasValue ?
                new ObjectParameter("DateCheckOut", dateCheckOut) :
                new ObjectParameter("DateCheckOut", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FN_ViewDoanThu_Result>("[QLCF_NTPEntities].[FN_ViewDoanThu](@DateCheckIn, @DateCheckOut)", dateCheckInParameter, dateCheckOutParameter);
        }
    
        [DbFunction("QLCF_NTPEntities", "FN_ViewSanPham")]
        public virtual IQueryable<FN_ViewSanPham_Result> FN_ViewSanPham(Nullable<System.DateTime> dateCheckIn, Nullable<System.DateTime> dateCheckOut)
        {
            var dateCheckInParameter = dateCheckIn.HasValue ?
                new ObjectParameter("DateCheckIn", dateCheckIn) :
                new ObjectParameter("DateCheckIn", typeof(System.DateTime));
    
            var dateCheckOutParameter = dateCheckOut.HasValue ?
                new ObjectParameter("DateCheckOut", dateCheckOut) :
                new ObjectParameter("DateCheckOut", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FN_ViewSanPham_Result>("[QLCF_NTPEntities].[FN_ViewSanPham](@DateCheckIn, @DateCheckOut)", dateCheckInParameter, dateCheckOutParameter);
        }
    }
}
